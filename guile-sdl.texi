\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-sdl.info
@settitle guile-sdl
@iftex
@afourpaper
@end iftex
@c %**end of header

@set UPDATED 18 Jun 2001
@set EDITION 0.1.0
@set VERSION 0.1.0

@dircategory Guile
@direntry
* guile-sdl: (guile-sdl).     SDL for Guile
@end direntry


@c --- title page starts here ---

@titlepage
@title guile-sdl
@subtitle SDL for Guile
@subtitle Version @value{VERSION}
@author Alex Shinn

@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001 Alex Shinn

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
@end titlepage

@c --- title page ends here ---

@syncodeindex vr cp
@syncodeindex fn cp

@node Top, Introduction, (dir), (dir)

@ifinfo
This file documents the guile-sdl library, which is a generic
sdl for Guile.
@end ifinfo

@menu
* Introduction::                What is this all about?
* General SDL::                 General SDL functions
* Video::                       Video and Graphics Functions
* Events::                      Events and Input Handling
* OpenGL::                      OpenGL Interface
* TrueType::                    TrueType Font Support
* Audio::                       Audio Support
* Index::                       Procedure index.
@end menu

@node Introduction, General SDL, Top, Top
@chapter Introduction

The guile-sdl library is an interface to the SDL (Simple Direct Media
Layer) library.  The goal is to provide both a clean and direct
interface to the lowest level SDL, while extending with higher level
concepts where useful, such as default arguments and functional-style
application of graphics routines.  Several SDL add-on libraries have
been wrapped and included with guile-sdl, including SDL_image (for
loading multiple image formats), SDL_ttf (for rendering true type
fonts), and SDL_mixer (for playing/mixing different audio formats).
In addition, some low-level 2D graphics primitives have been provided.

@menu
* Quick Start::                A simple example
* Naming Conventions::         Naming conventions
@end menu

@node Quick Start, , Naming Conventions, Introduction
@section Quick Start

To whet your appetite, and hopefully get you excited about the ease
and flexibility of programming with guile-sdl, we begin with a simple
example.  The following program, which can be found in the examples
directory, is a simple image browser.  You can cycle through images by
using space, n or right to go forward, backspace, p or left to go
backwards, and escape or q to quit.

@lisp
;; load the SDL module and some useful srfi's
(use-modules (sdl sdl)
             (srfi srfi-1)
             (srfi srfi-2))

;; initialize the video subsystem
(sdl-init sdl-init/video)

;; directory to search for images in
(define image-dir "/usr/share/pixmaps/")

;; utility to test if a path is a directory
(define (file? f)
  (let* ((stats (stat f))
         (type (stat:type stats)))
    (eq? type 'regular)))

;; build a ring of image file names
(define image-ring
  (let ((dir (opendir image-dir)))
    (letrec ((D (lambda (ls)
                  (let ((file (readdir dir)))
                    (if (eof-object? file)
                        (begin (closedir dir) ls)
                        (D (cons (string-append image-dir file)
                                 ls)))))))
      (apply circular-list (reverse (filter file? (D '())))))))

;; functions to cycle through the ring
(define (next-image)
  (let ((next (car image-ring)))
    (set! image-ring (cdr image-ring))
    next))

(define (prev-image)
  (let ((orig image-ring))
    (while (not (eq? (cddr image-ring) orig))
      (set! image-ring (cdr image-ring)))
    (let ((image (car image-ring)))
      (set! image-ring (cdr image-ring))
      image)))

;; display an image given a filename
(define (show file)
  (and-let* ((image (sdl-load-image file)))
    (sdl-set-video-mode (sdl-surface:w image) (sdl-surface:h image)
                        24 sdl-video/hwsurface)
    (sdl-blit-surface image)
    (sdl-flip)))

;; show the first image
(show (next-image))

;; event handler
(let handle ((e (sdl-make-event)))
  (if (sdl-wait-event e)
    (case (sdl-event:type e)
      ((event/key-down)
       (case (sdl-event:key:keysym:sym e)
         ((key/left key/backspace)
          (show (prev-image)))
         ((key/right key/space)
          (show (next-image)))
         ((key/escape key/q)
          (sdl-quit)
          (quit))))))
  (handle e))
@end lisp

@node Naming Conventions, Quick Start, , Introduction
@section Naming Conventions

@menu
* Renaming C Functions::        How SDL C Functions are named in Guile
* Enums and Constants::         Naming enumerated types
* Create and Make::             Create vs Make Functions
@end menu

The most important thing to learning a wrapped library for a
programming language, assuming you know the language and the library,
is to know the naming conventions.  Then you can begin programming
without having to look up the exact function reference for the wrapper
library.

@node Renaming C Functions, Enums and Constants, , Naming Conventions
@subsection Renaming C Functions

As with standard guile naming conventions, all names are converted to
lower-case, and underscores are replaced with hyphens.  Functions that
modify one or more arguments have an exclamation point (@code{!})
appended, and functions which ask a question and return a boolean
value have a question mark (@code{?}) appended.

@node Enums and Constants, Create and Make, Renaming C Functions, Naming Conventions
@subsection Enums and Constants

SDL flags and numeric constants are denoted with a @code{sdl-type/}
prefix.  So for instance, the @code{SDL_INIT_FOO} constants are
renamed @code{sdl-init/foo}.  In a few instances a type prefix has
been introduced where one did not previously exist, to more clearly
indicate the symbol as a constant and document its intent.

The enumerated types for event types and key symbols are translated as
symbols, for ease of use in @code{case} statements.  This is not done
for other constants, which are typically flags that need to be joined
with @code{logior}.

@node Create and Make, , Enums and Constants, Naming Conventions
@subsection Create and Make

The standard SDL prefix for creating a new instance of a type is
@code{create}.  The standard Guile prefix is @code{make}.  Wherever an
SDL function uses the @code{create} prefix we will keep it.  SMOB
creation functions unique to Guile, such as @code{sdl-make-rect}, will
use @code{make} as a prefix.  In addition, we will sometimes introduce
higher-level creation functions, such as @code{sdl-make-surface},
which is a wrapper to @code{sdl-create-rgb-surface} which provides
useful default values from the current screen information.

@node General SDL, Video, Introduction, Top
@chapter General SDL

@node Video, Events, General SDL, Top
@chapter Video

@node Events, OpenGL, Video, Top
@chapter Events

@node OpenGL, TrueType, Events, Top
@chapter OpenGL

@node TrueType, Audio, OpenGL, Top
@chapter TrueType

@node Audio, Index, TrueType, Top
@chapter Audio

@node Index,  , Audio, Top
@comment    node-name,         next,       previous, up
@unnumbered Index
     
@printindex cp

@contents

@bye
