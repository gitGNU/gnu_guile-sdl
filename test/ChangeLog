2013-09-04  Thien-Thi Nguyen  <ttn@gnu.org>

	Release: 0.5.1

2013-09-04  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘(sdl misc-utils) ignore-all-event-types-except’.

	* event.scm: Import  ‘(sdl misc-utils) ignore-all-event-types-except’.
	<synthesize some events>: Don't simulate ESC keypress here.
	<queue interaction>: Do ‘scroll-up!’ at end.
	<fleeting ignorance>: New section.
	<main loop>: Don't do ‘scroll-up!’.

2013-09-04  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl misc-utils) rectangle<-geometry-string’.

	* rect.scm: Import ‘(sdl misc-utils) rectangle<-geometry-string’.
	<from geom>: New section.

2013-09-04  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl misc-utils) rectangle-closure’.

	* rect.scm: Import ‘(sdl misc-utils) rectangle-closure’.
	<closure>: New section.

2013-09-04  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl misc-utils) rect<-surface’.

	* rect.scm: Import ‘(sdl misc-utils) rect<-surface’.
	<from surface>: New section.

2013-09-04  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl misc-utils) copy-rectangle’.

	* rect.scm: Import ‘(sdl misc-utils) copy-rectangle’.
	(same-as-test-rect?): New proc.
	<copy>: New section.

2013-09-04  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘(sdl misc-utils) call-with-clip-rect’.

	This reverts -- in spirit -- the misguided 2004-05-21,
	"Rewrite to not use `call-with-clip-rect'".

	* rect.scm: Import ‘(sdl misc-utils) call-with-clip-rect’.
	<draw some rectangles filled with random colors>: Use it.

2013-08-25  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Move "bail on non-interactive" as late as possible.

	* mixer.scm: ...immediately prior to making noise.

2013-07-19  Thien-Thi Nguyen  <ttn@gnu.org>

	Release: 0.5.0

2013-07-19  Thien-Thi Nguyen  <ttn@gnu.org>

	[sdl] Add optional arg START to colormap procs.

	* rect.scm <futz w/ the colormap>: Call ‘set-palette’
	and ‘set-colors!’ with random START index.

2013-07-19  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘set-palette’.

	* rect.scm <futz w/ the colormap> (jam! pal!): New internal proc.
	<futz w/ the colormap> (jam!): Use ‘pal!’.

2013-07-19  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘lock-surface’, ‘unlock-surface’.

	* image.scm <locking>: ...here, in new section.

2013-07-19  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘pixel-rgb’, ‘pixel-rgba’.

	* rect.scm <draw some rectangles filled with random colors>:
	Also use ‘pixel-rgb’ and ‘pixel-rgba’ to "values" unpack
	the numeric value; compare against the "non-values" variant.

2013-07-19  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise color-key procs.

	* image.scm <pixel data>: Use ‘surface-color-key!’ to
	set the color key prior to gyrations and ‘set-color-key!’
	to clear it afterwards.

2013-07-18  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Avoid ‘uniform-vector-ref’.

	* image.scm: Import SRFI 4 procs for vector reference.
	<pixel data> (try): Use ‘u8vector-ref’, ‘u16vector-ref’, or
	‘u32vector-ref’ as appropriate instead of ‘uniform-vector-ref’.

2013-07-18  Thien-Thi Nguyen  <ttn@gnu.org>

	New (sdl sdl) proc: surface-pixels

	* image.scm: Import ‘(sdl misc-utils) exact-truncate’,
	SRFI 4 procs, ‘(ice-9 format) format’.
	<load and blit image>: Add ‘info’ call.
	<pixel data>: New section to exercise ‘surface-pixels’.

2013-07-18  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Add abstraction: hex

	* common (hex): New proc.
	* cursor.scm (spew-ramp hex): Delete proc.
	* event.scm (input-loop): Use ‘hex’.
	* leak.scm (check-alloc/dealloc): Likewise.

2013-07-14  Thien-Thi Nguyen  <ttn@gnu.org>

	[sdl] Replace keysymold.kp w/ keysym.kp.

	* event.scm (no-5): Delete proc.
	(input-loop): Use keysyms directly; use new keysym symbols.

2013-07-14  Thien-Thi Nguyen  <ttn@gnu.org>

	[sdl] Add video.kf #:kxform.

	* cursor.scm: Throughout, use new video symbols.
	* event.scm: Likewise.
	* image.scm: Likewise.
	* rect.scm: Likewise.
	* roto.scm: Likewise.

2013-07-13  Thien-Thi Nguyen  <ttn@gnu.org>

	[sdl] Add #:kxform for ‘event-type’ kf.

	* event.scm: Throughout, use new event-type symbols.

2013-07-13  Thien-Thi Nguyen  <ttn@gnu.org>

	[sdl] Add init.kf #:kxform.

	* cursor.scm: Throughout, use new init symbols.
	* event.scm: Likewise.
	* gfx.scm: Likewise.
	* image.scm: Likewise.
	* leak.scm: Likewise.
	* mixer.scm: Likewise.
	* opengl.scm: Likewise.
	* rect.scm: Likewise.
	* roto.scm: Likewise.
	* ttf.scm: Likewise.

2013-07-13  Thien-Thi Nguyen  <ttn@gnu.org>

	[sdl] Add kmod.kf #:kxform.

	* alive.test: Throughout, use new kmod symbols.
	* event.scm: Likewise.

2013-07-13  Thien-Thi Nguyen  <ttn@gnu.org>

	[ttf] Add ttf.kf #:kxform.

	* ttf.scm (font-loader): Do ‘s/TTF_STYLE_UNDERLINE/underline/’.

2013-07-10  Thien-Thi Nguyen  <ttn@gnu.org>

	Drop flagstash:* procs.

	* alive.test <all the flag stashes>: Delete section.

2013-07-10  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Use stash names, not objects.

	* alive.test <find the keyboard mod flags>: Delete section;
	subsequently, use ‘keyboard-modifier’ instead of ‘*kmod*’.
	<*have-ttf*>: Use ‘kotk’ and ‘font-style’ directly.

2013-07-10  Thien-Thi Nguyen  <ttn@gnu.org>

	[sdl] Internalize enumstash objects.

	* alive.test <all the enum stashes>: Delete section.

2013-07-10  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Avoid ‘event-types’.

	* event.scm <report event states>: Use ‘kotk’ instead.

2013-07-08  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Make cursor test faster.

	* cursor.scm <gyrate>: Bump delay down to 50 msec.

2013-07-08  Thien-Thi Nguyen  <ttn@gnu.org>

	[sdl] Make conversion procs also accept stash name.

	* alive.test <enums round-trip>: New section.
	<flags round-trip>: Likewise.

2013-07-08  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘kotk’.

	* alive.test: ...here, prior to exercising ‘get-error’.

2013-07-06  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Don't use ‘(sdl gfx) font-rotations’.

	* gfx.scm <character (font) stuff and blitting>:
	Use vector of rotation symbols directly; hardcode count.

2013-07-04  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Fix bug: Specify mouse button for ‘event:motion:set-state!’.

	Originated 2013-06-23, "Synthesize
	events; narrow ‘INTERACTIVE=1’ effect".

	* event.scm <synthesize some events>: ...here.

2013-07-04  Thien-Thi Nguyen  <ttn@gnu.org>

	Drop (sdl sdl) proc: make-keysym

	* leak.scm (alloc/dealloc-tests): Drop ‘make-keysym’ test.

2013-07-03  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Use " . " to separate fields in event test display.

	* event.scm: ...here, throughout.

2013-07-02  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check evqueue-{add,peek,get}.

	* event.scm <queue interaction>: ...here, w/ a de- then
	re-queue using ‘evqueue-peek’, ‘evqueue-get’ and ‘evqueue-add’.

2013-07-02  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Make ‘fake’ event messages easier to read.

	* event.scm (fake): Use TAB to align output.

2013-07-02  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Check ‘push-event’ rv.

	* event.scm (fake): Error out if ‘push-event’ fails.

2013-07-01  Thien-Thi Nguyen  <ttn@gnu.org>

	Add (sdl sdl) proc: surface-alpha!

	* image.scm <alpha>: Exercise ‘surface-alpha!’.

2013-06-30  Thien-Thi Nguyen  <ttn@gnu.org>

	Drop enumstash: gl-enums

	* alive.test <all the enum stashes>: Drop ‘gl-enums’.

2013-06-27  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘display-format-alpha’.

	* image.scm <convert explicitly>: Factor out ‘show!’;
	add another ‘show!’ invocation using ‘display-format-alpha’.

2013-06-27  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check event queue procs.

	* event.scm <queue interaction>: New section.

2013-06-27  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Add another filter state; make SPC cycle the states.

	* event.scm: Use SRFI 1 ‘car+cdr’.
	(relrect-bg): Init to ‘#f’.
	(ignore-maybe): Delete proc.
	(rat-grata!): New proc; invoke once at top-level
	instead of setting the event filter there.
	(input-loop) [SPACE KEYUP]: Use ‘rat-grata!’.
	<explanatory message>: Update.

2013-06-27  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check new event model procs.

	* event.scm (check-joystick-maybe): Use ‘joystick-polling’;
	check its rv against that of ‘joystick-event-state’.
	<report event states>: Use ‘event-type-handling’;
	check its rv against that of ‘event-state’.

2013-06-25  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Indicate active filter via color change.

	* event.scm: <set video mode>: Bump depth to 32.
	(relrect-bg): New var.
	(draw-relative-rectangle!): Use ‘relrect-bg’.
	(input-loop) <SPACE>: Restrict toggling to KEYDOWN; set
	‘relrect-bg’ to red if filter active, green if inactive.

2013-06-25  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise subsytem init/quit procs.

	* event.scm <init>: Use ‘init-subsystem’.
	<quit>: Use ‘quit-subsystem’.

2013-06-25  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise more joystick procs.

	* event.scm (check-joystick-maybe): Use ‘joystick-event-state’;
	if available, return a list of joystick object and num-foo counts.
	(tickle-joy-spew!, tickle-joy!): New procs.
	(input-loop): If joystick availabe, call ‘tickle-joy!’.
	<quit SDL>: Update ‘JOY’ access.

2013-06-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl sdl) button?’.

	* event.scm (input-loop): ...here.

2013-06-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘set-mod-state’, ‘get-mod-state’, ‘get-mouse-state’.

	* event.scm <mod and mouse state>: New section.

2013-06-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise event:motion:{xrel,yrel,state}.

	* event.scm (input-loop) [MOUSEMOTION]: ...here.

2013-06-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘event:button:x’, ‘event:button:y’.

	* event.scm (input-loop) [MOUSEBUTTONDOWN MOUSEBUTTONUP]: ...here.

2013-06-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘event:key:keysym:unicode’.

	* event.scm (input-loop) [KEYDOWN KEYUP]: ...here.

2013-06-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘(sdl sdl) enable-unicode’.

	* event.scm (unicode-enabled): New var.

2013-06-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘event:key:keysym:scancode’.

	* event.scm (input-loop) [KEYDOWN KEYUP]: ...here.

2013-06-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Synthesize events; narrow ‘INTERACTIVE=1’ effect.

	* event.scm: Don't skip if ‘INTERACTIVE=1’.
	(fake, fake-key-down/up): New procs.
	<report event states>: Remove delay.
	<synthesize some events>: New section.
	<main loop>: Scroll up before calling ‘input-loop’.
	<quit SDL>: If not ‘INTERACTIVE=1’, delay a bit.

2013-06-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘SDL_VIDEORESIZE’ getters.

	* event.scm (input-loop) [VIDEORESIZE]: ...here.

2013-06-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Don't forget to keep looping on joy hat motion event.

	Omission from 2013-06-12, "Exercise joystick axis/ball/hat getters".

	* event.scm (input-loop) [JOYHATMOTION]: ...here.

2013-06-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘SDL_ACTIVEEVENT’ getters.

	* event.scm (input-loop): ...here.

2013-06-22  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Scroll up so that app/event states are readable.

	* event.scm <report event states>: ...here.

2013-06-22  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Don't use (sdl ttf) for event test.

	Relying on optional components
	to test core features is unwise.

	* event.scm: Don't check ‘*have-ttf*’;
	don't import ‘(sdl ttf)’ procs;
	instead, import ‘(sdl gfx)’ procs w/ prefix ‘GFX:’;
	don't to ‘ttf-init’.
	(font): Delete.
	(height): Hardcode to 10 (font height 8 plus 2 pixels).
	(white): Delete.
	(WHITE): New constant integer.
	(display-centered-w/height-proc): Also precompute ‘full-width’
	and ‘screen’; use ‘(sdl gfx) draw-string’ for rendering.

2013-06-13  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘(sdl sdl) video-cmf’.

	* rect.scm <top-level>: ...here, after checking video mode.

2013-06-13  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl sdl) caption-ti’.

	* rect.scm <futz w/ the window-manager>: ...here.

2013-06-13  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check new values-returning ttf procs.

	* ttf.scm (rand-rect): ...here, specifically ‘text-wh’.
	(spew-utf-8): ...here, specifically ‘utf8-wh’.
	(spew-at): ...here, specifically ‘font:glyph-xXyYa’.

2013-06-13  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl ttf) text-wh’.

	* ttf.scm (rand-rect): ...here.

2013-06-13  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl ttf) utf8-wh’.

	* ttf.scm (spew-utf-8): ...here.

2013-06-13  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl mixer) device-ffc’.

	* mixer.scm <display audio device info>: ...here.

2013-06-12  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘mouse-bxy’.

	* event.scm: Import SRFI 11 ‘let-values’.
	(input-loop): Call ‘mouse-bxy’ then ‘get-mouse-relative-state’;
	check that the buttons match and that the latter x,y are zero.

2013-06-12  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise joystick axis/ball/hat getters.

	* event.scm (input-loop): Exercise the getters for
	‘SDL_JOYAXISMOTION’, ‘SDL_JOYBALLMOTION’, ‘SDL_JOYHATMOTION’.

2013-06-12  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check key/mbutton/jbutton getters.

	* event.scm (input-loop check-updn): New proc.
	(input-loop): Check that the state from the getter
	procs ‘event:key:state’, ‘event:button:state’ and
	‘event:jbutton:state’ are consistent w/ the event type;
	exercise also ‘event:jbutton:which’ and ‘event:jbutton:button’.

2013-06-11  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Incorporate ‘debug?’ into unique caller.

	* common: ...here, using ‘(env-1? "DEBUG")’ directly.

2013-06-11  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Convert ‘DEBUG=1’ gates to ‘VERBOSE=1’.

	* alive.test (d>>): Delete proc; use ‘info’ throughout.
	* event.scm: Replace ‘debug?’ + ‘fso’ w/ ‘info’.
	* gfx.scm: Likewise.
	* leak.scm: Likewise.
	* rect.scm: Likewise.

2013-06-11  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Don't gate leak test on ‘DEBUG=1’.

	* leak.scm: ...here.

2013-06-06  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Use ‘top’ more.

	* event.scm (display-centered)
	(display-centered/next-line)
	(display-centered/next-next-line): ...here.

2013-06-05  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Don't bother w/ ‘KMOD_NONE’.

	* event.scm (input-loop): Check against empty list
	instead of ‘(KMOD_NONE)’ to detect "no modifiers pressed".

2013-06-05  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Use u8 vector in leak test.

	* leak.scm: Import SRFI 4 ‘make-u8vector’.
	(alloc/dealloc-tests): Use ‘make-u8vector’.

2013-06-02  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Simplify ‘was-init’ check.

	* alive.test: Pass the empty list to ‘was-init’; don't iterate.

2013-06-01  Thien-Thi Nguyen  <ttn@gnu.org>

	[sdl] Add optional arg ‘symbolic’ for mouse state procs.

	* event.scm (input-loop): Specify symbolic mouse state.

2013-06-01  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Fix up some calls to joystick procs.

	Erroneous since inception -- i.e., written w/ bugs and never
	tested, ugh -- from 2013-05-23, "Exercise some joystick procs".

	* event.scm (check-joystick-maybe): Call ‘joystick-name’
	and ‘joystick-opened?’ w/o arg; add 2 ‘~A’ to ‘info’ fmt string.

2013-05-31  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘get-mouse-relative-state’.

	* event.scm (test-rect): Change geometry to 400x600.
	(display-centered/next-next-line): New proc.
	(draw-relative-rectangle!): Likewise.
	(input-loop): Use ‘get-mouse-relative-state’; display
	its value textually as well as via a relative rectangle.

2013-05-31  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Consolidate ‘get-key-state’ processing.

	* event.scm (input-loop): ...here, and btw
	spiffing the output to use " -- " instead of ": ".

2013-05-31  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Init joystick subsystem in event test.

	Omission from 2013-05-23, "Exercise some joystick procs".

	* event.scm <init>: Also specify ‘SDL_INIT_JOYSTICK’.

2013-05-30  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Display event history; output nicer names.

	* event.scm (scroll-up!, nicer, nice-type, no-5): New procs.
	(input-loop): Scroll prior to displaying event info;
	output nicer names.
	<report event states>: Output nicer type name.

2013-05-30  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘was-init’.

	* alive.test <all loaded but none initialized>: New section.

2013-05-30  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘get-error’.

	* alive.test <top-level>: ...here, immediately before exit.

2013-05-30  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl mixer) paused?’.

	* mixer.scm <loop>: ...here.

2013-05-29  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Add support for ‘OGGPLAYER=COMMAND’.

	* mixer.scm <loop>: About 65% of the way through the
	internal playback, check for env var ‘OGGPLAYER’ and if
	sane, switch to external playback w/ the specified COMMAND.

2013-05-29  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Add abstraction: load-music

	* mixer.scm (load-music): New proc.
	(background): Use ‘load-music’.

2013-05-29  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl mixer) set-music-command’.

	* mixer.scm (set-music-command!): New proc.
	<play background>: Use ‘set-music-command!’
	to ensure internal playback.

2013-05-29  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘paused-music?’.

	* mixer.scm <loop>: ...here.

2013-05-29  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Decrease sfx volume; set music volume, too.

	* mixer.scm <top-level>: ...here.

2013-05-29  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Use named-‘let’ instead of ‘while’.

	* mixer.scm (angle): Delete var.
	<loop>: ...here.

2013-05-29  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘(sdl mixer) playing?’.

	* mixer.scm <loop>: ...here, for sfx ‘ch’.

2013-05-29  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘convert-surface’.

	* image.scm <convert explicitly>: New top-level section.

2013-05-28  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Add abstraction: standard-blit!

	* image.scm (standard-blit!): New proc; use it throughout.

2013-05-28  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘get-rgb’, ‘get-rgba’.

	* rect.scm <draw some rectangles>:
	...here, when choosing random colors.

2013-05-27  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Display more info on channels in mixer test.

	* mixer.scm (specs): ...here, distinguishing
	also the cases where no information is available,
	and where there are more than two channels.

2013-05-27  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Add abstraction: info

	* common (info): New proc.
	* cursor.scm: Use it throughout to
	replace ‘fso’ conditional on ‘verbose?’.
	* event.scm: Likewise.
	* mixer.scm: Likewise.
	* rect.scm: Likewise.
	* roto.scm: Likewise.
	* ttf.scm: Likewise.

2013-05-27  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Change env var test driver uses to gate message.

	* zow.in: Display "GUILE_LIBSITE: ..." message
	only if env var ‘DEBUG’ has precise value "1".

2013-05-25  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Support both depths 16 and 32 in gfx test.

	* gfx.scm (DEPTH): New var.
	<initialize the video mode>: Use it.
	<draw ellipses>: Use constant RGBA if 32 bpp.
	<draw circles>: Likewise.

2013-05-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘map-rgb’, ‘map-rgba’.

	* rect.scm (fmt): New var.
	<draw some rectangles>: ...here, when choosing random colors.

2013-05-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Add abstraction: random-rgba

	* gfx.scm (random-rgba): New proc; use it
	throughout to replace ‘(+ ALPHA (ash (random-rgb) 8))’.

2013-05-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Add abstraction: random-rgb

	* gfx.scm (random-rgb): New proc;
	use it throughout to replace ‘(random #xffffff)’.

2013-05-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘set-alpha!’.

	* image.scm <alpha>: ...here, in new section.

2013-05-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘video-driver-name’.

	* rect.scm <top-level>: ...here.

2013-05-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘video-mode-ok’.

	* rect.scm <top-level>: ...here.

2013-05-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Promote video-info dump from DEBUG=1 to VERBOSE=1.

	* rect.scm <top-level>: ...here.

2013-05-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check clipping rectangle procs.

	* rect.scm (gnu-head): New var.
	<clipping rectangle>: ...here, in new section.

2013-05-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘toggle-full-screen’.

	* rect.scm <top-level>: ...here.

2013-05-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise/check ‘grab-input’.

	* event.scm <top-level>: ...here.

2013-05-24  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise some rectangle procs.

	* rect.scm (test-rect): ...here,
	signalling error if this object is "weird".

2013-05-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Elide local var.

	* fading.scm <top-level fade/wait!>: ...here.

2013-05-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘enable-key-repeat’.

	* event.scm <top-level>: ...here.

2013-05-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘font:set-style!’.

	* ttf.scm (font-loader): ...here.

2013-05-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise some color procs.

	* ttf.scm (rand-color): ...here.

2013-05-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘get-ticks’.

	* roto.scm <top-level>: ...here.

2013-05-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise fps-manager procs.

	* roto.scm (spin): Take arg ‘fps’ instead of ‘wait’;
	use an fps-manager to maintain the specified rate.
	<top-level>: Update calls to ‘spin’.

2013-05-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise ‘get-app-state’.

	* event.scm <top-level>: ...here,
	before reporting event states.

2013-05-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Exercise some joystick procs.

	* event.scm (check-joystick-maybe): New proc.
	(JOY): New var.

2013-05-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Check returned-surface depth of v/h/vh flipping procs.

	* image.scm (check-depth): New proc; use it for
	‘upside-down’, ‘left-right’ and ‘orig’ surfaces.

2013-05-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Bump image test screen bpp to 32.

	* image.scm (screen): ...here, in ‘set-video-mode’ call.

2013-05-23  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Add abstraction: screen

	* image.scm (screen): New var; use it
	throughout to replace ‘(SDL:get-video-surface)’.

2013-05-17  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Use 8-bit video mode in cursor test.

	* cursor.scm <set video mode>: ...here, so that
	the gamma-ramp fiddling is much more visible.

2013-05-16  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Move sound fx left to right instead of bouncing.

	* mixer.scm (angle): Set to -110.
	<loop>: Bump ‘angle’ by 20; decrease wait time to 250ms.

2013-05-15  Thien-Thi Nguyen  <ttn@gnu.org>

	[v] Make fading test quicker.

	* fading.scm: Decrease fade duration to 420 msec.

2013-05-15  Thien-Thi Nguyen  <ttn@gnu.org>

	[v int] Make gfx ‘draw-characters!’ more eye-pleasing.

	* gfx.scm (draw-characters!): Bump max w and h by one pixel.

2013-03-18  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Release: 0.4.2

2013-03-07  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Don't bother checking memory leaks for Guile 2.

	Apparently, Guile 2 does not track freed memory.  See:
	<http://lists.gnu.org/archive/html/bug-guile/2013-03/msg00054.html>.

	* leak.scm: Skip if under Guile 2.

2012-11-15  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Release: 0.4.1

2012-11-15  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v slog] Avoid ‘apply-to-args’.

	* cursor.scm: Use ‘(apply PROC ARGS)’ directly.

2012-11-14  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise ‘(sdl ttf) glyph-metrics’.

	* ttf.scm (spew-at): Get the #\@ glyph metrics;
	if they are not a list of length 5, exit failurefully.

2011-12-15  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Release: 0.4.0

2011-12-10  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[int] Avoid ‘quotient’.

	* gfx.scm <draw pie slices and arcs>: Use ‘ash’.

2011-12-10  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v int] Add abstraction: half

	* common (half): New proc.
	* event.scm (top, display-centered-w/height-proc)
	(display-centered, display-centered/next-line): Use ‘half’.
	* fading.scm (as-four): Likewise.
	* roto.scm (spin): Likewise.

2011-12-09  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise ‘set-colors!’.

	* rect.scm (screen): Specify depth 8.
	<futz w/ the colormap>: New section.

2011-12-09  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise ‘show-cursor’ more.

	* cursor.scm <main loop>: Periodically toggle cursor visibility.

2011-12-03  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise more gfx procs.

	* gfx.scm <singular stuff>: New section, to exercise
	‘draw-point’, ‘draw-rectangle’, ‘draw-aa-line’, ‘draw-aa-circle’,
	‘draw-aa-ellipse’, ‘draw-trigon’, ‘draw-aa-trigon’, ‘draw-aa-polygon’.

2011-12-02  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise some window-manager procs.

	* rect.scm: Use ‘(sdl sdl)’ procs ‘set-icon’,
	‘get-wm-info’, ‘get-caption’, ‘set-caption’.

2011-12-02  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise ‘show-cursor’.

	* cursor.scm: Make sure the cursor is visible.

2011-12-01  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise ‘save-bmp’, ‘load-bmp’.

	* image.scm <top>: Round-trip screen to/from .bmp file.

2011-12-01  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise ‘surface?’, ‘surface:depth’, ‘surface:flags’.

	* rect.scm: Check that ‘screen’ is a surface; exit
	failurefully if not; gather depth, flags; display if ‘verbose?’.

2011-11-30  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Return / take u16 uvec for gamma-ramp getter / setter procs.

	* cursor.scm (spew-ramp): New proc.
	<top-level>: Call ‘SDL:get-gamma-ramp’ and ‘spew-ramp’.
	<cursor loop>: Use ‘make-u16vector’, ‘u16vector-set!’.

2011-11-30  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Restrict type to u8 uvec for some ‘create-cursor’ args.

	* cursor.scm: Import (srfi srfi-4).
	(random-16): Use ‘list->u8vector’.
	<final cursor>: Use ‘u8vector’.

2011-11-29  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v cursor] Center the pointer precisely; ignore INTERACTIVE=1.

	* cursor.scm: Don't skip if ‘INTERACTIVE=1’.
	<mouse-warp>: Bump UL corner so pointer center is screen center.

2011-11-29  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise ‘(sdl ttf) render-glyph’.

	* ttf.scm (spew-at): New proc.
	<top-level>: Call ‘spew-at’.

2011-11-29  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise some TTF procs for handling UTF-8.

	* ttf.scm: Add ‘coding: utf-8’ to first-line comment.
	(renderer, spew-utf-8): New procs.
	<top-level>: Call ‘spew-utf-8’.

2011-11-29  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise flagstash:{event-mask,ttf}.

	* alive.test <top>: Add ‘flagstash:event-mask’ to core list.
	<*have-ttf*>: Access ‘flagstash:ttf’.

2011-11-29  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[int] Use ‘zero?’.

	* cursor.scm <initial blit>: Use ‘zero?’.
	* ttf.scm <TTF init>: Likewise.

2011-11-29  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v int] Use ‘even?’.

	* event.scm (ignore-maybe): Use ‘even?’.

2011-11-29  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v int] Use different #:prefix for each module.

	U (X, Y) ≡ "Use #:prefix ‘X:’ for importing (sdl Y)".
	Implicit ∀ files: Update references.
	* alive.test <*have-ttf*>: U (TTF, ttf).
	<*have-mixer*>: U (MIXER, mixer).
	* event.scm: U (TTF, ttf).
	* gfx.scm: U (GFX, gfx).
	* leak.scm <top>: Don't import (sdl ttf) unconditionally.
	<*have-ttf*>: U (TTF, ttf).
	<*have-mixer*>: U (MIXER, mixer).
	* mixer.scm: U (MIXER, mixer).
	* ttf.scm: U (TTF, ttf).

2011-11-28  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Exercise some more (sdl ttf) procs.

	* ttf.scm (font-loader): New proc.
	(fonts): Use ‘font-loader’.

2011-11-28  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Make sure tests explicitly ‘exit’.

	* cursor.scm: Exit with value returned by ‘SDL:quit’.
	* event.scm: Likewise.
	* fading.scm: Likewise.
	* gfx.scm: Likewise.
	* image.scm: Likewise.
	* mixer.scm: Likewise.
	* rect.scm: Likewise.
	* roto.scm: Likewise.
	* ttf.scm: Likewise.

2011-11-28  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Make tests less weary for the impatient.

	* cursor.scm: Don't delay after warping the mouse;
	reduce loop delay to 100msec, end delay to 420msec.
	* fading.scm: Reduce loop delay to 420msec.
	* gfx.scm <character and IMFI>: Reduce loop iteration to 100.
	<top>: Reduce end delay to 500msec.
	* rect.scm: Eliminate loop delay.
	<top>: Add end delay.
	* roto.scm <first spin>: Reduce loop delay to 50msec.

2011-11-28  Thien-Thi Nguyen  <ttn@gnuvola.org>

	For import, use #:prefix instead of #:renamer.

	* alive.test: Use #:prefix in ‘use-modules’ forms.
	* cursor.scm: Likewise.
	* event.scm: Likewise.
	* fading.scm: Likewise.
	* gfx.scm: Likewise.
	* image.scm: Likewise.
	* leak.scm: Likewise.
	* mixer.scm: Likewise.
	* rect.scm: Likewise.
	* roto.scm: Likewise.
	* ttf.scm: Likewise.

2011-11-28  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v int] Use some (guile-baux common) procs unconditionally.

	* common: Import (guile-baux common) procs ‘fs’, ‘fso’, ‘fse’.
	(fso): Delete proc.
	* alive.test (debug?): Delete redundant var.
	(d>>): Use ‘fse’.
	* event.scm (display-centered-w/height-proc): Use ‘fs’.
	* t99-cov: Don't import (guile-baux common).

2011-11-28  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Add test coverage test for MAINTAINER_MODE; mark xfail.

	* t99-cov: New file.
	* Makefile.am (XFAIL_TESTS): New var.
	[MAINTAINER_MODE] (CLEANFILES): New var.
	[MAINTAINER_MODE] (check_DATA): Add t99.list.
	[MAINTAINER_MODE] (XFAIL_TESTS): Add t99-cov.
	[MAINTAINER_MODE] (TESTS): Add t99-cov.
	[MAINTAINER_MODE] (t99.list): New target.

2011-11-28  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v int] Make Guile-BAUX modules available to tests.

	* zow.in: Invoke Guile with -L ‘"${srcdir}/../build-aux"’.

2011-11-28  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Add ‘VERBOSE=1’ support.

	* common (verbose?): New var.

2011-11-28  Thien-Thi Nguyen  <ttn@gnuvola.org>

	New (sdl gfx) elements: font-rotation!, font-rotations

	* gfx.scm <character (font) stuff and blitting>:
	Exercise ‘font-rotations’, ‘font-rotation!’, ‘draw-string’.

2011-11-25  Thien-Thi Nguyen  <ttn@gnuvola.org>

	New (sdl gfx) proc: draw-thick-line

	* gfx.scm (one line!-proc): Also draw thick line.

2011-11-24  Thien-Thi Nguyen  <ttn@gnuvola.org>

	New (sdl gfx) proc: draw-rounded-rectangle

	* gfx.scm: Test rounded-rectangle drawing, too.

2011-11-23  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[slog] Support "make install" and "make check" under Guile 1.8+.

	* zow.in: New file.
	* Makefile.am (TESTS_ENVIRONMENT): Use "sh zow".
	(simu, check_DATA): New vars.
	($(simu), clean-local, installcheck-local): New targets.

2011-11-23  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Restrict type to s16 uvec for some gfx primitives.

	* gfx.scm: Use module (srfi srfi-4).
	<bezier, polygon>: Use s16 uniform vectors.

2011-11-19  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v] Say "loading ..." for all modules in alive.test.

	* alive.test <top>: Say "loading ..." for ‘(sdl simple)’.

2011-10-24  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[v int] Use ‘~%’ instead of ‘\n’ in format strings.

	* common: Throughout, use ‘~%’ instead of ‘\n’ in format strings.
	* alive.test: Likewise.
	* event.scm: Likewise.
	* gfx.scm: Likewise.
	* leak.scm: Likewise.
	* mixer.scm: Likewise.
	* rect.scm: Likewise.

2011-05-02  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[test] Test ‘enumstash-enums’, ‘enum->number’, ‘number->enum’.

	* alive.test: List the enums; get their symbols; convert
	syms to ints; convert ints to syms; check round-trip equiv.

2011-05-01  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[maint] Use Free{SansBold,SerifBoldItalic}.ttf for testing.

	These are from the FreeFont Project:
	http://savannah.gnu.org/projects/freefont/
	released under GPLv2+ (as of 2002).

	* FreeSansBold.ttf: New file.
	* FreeSerifBoldItalic.ttf: New file.
	* Makefile.am (etcetc): Delete crystal.ttf;
	add FreeSansBold.ttf, FreeSerifBoldItalic.ttf.
	* crystal.ttf: Delete file.
	* event.scm: Use FreeSansBold.ttf.
	* ttf.scm: Use FreeSerifBoldItalic.ttf.

2011-04-29  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Fix bug: Make ‘number->flags’ return symbols, not strings.

	* alive.test: Add a test for ‘number->flags’.

2011-04-27  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[test] Exercise ‘set-gamma-ramp’ along with the cursor test.

	* cursor.scm: Every so often, call ‘set-gamma-ramp’
	with random red, green and blue tables.

2011-04-27  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[maint] Move testing machinery into test/.

	* Makefile.am: New file.
	* common (exit-77): Use ‘basename’.
	(datafile): Rewrite.

2011-04-26  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[test gfx] Allow disabling of MMX by env var.

	* gfx.scm: If env var ‘NOMMX’ is set, disable MMX.

2009-11-04  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[test] Ensure integer, not just exact, coordinates for line op.

	* gfx.scm (one span-points integer<-): New internal proc.
	(one span-points): Use it.
	Reported by Brian Templeton <bpt@tunes.org>.

2009-10-19  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[test] Avoid `return-it'.

	* ttf.scm: Rephrase main loop to use named-let.

2009-10-19  Thien-Thi Nguyen  <ttn@gnuvola.org>

	[test int] Use `datafile' more.

	* cursor.scm: Use `datafile'.
	* event.scm (font): Likewise.
	* fading.scm: Likewise.

2009-04-24  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Release: 0.3.10

2009-04-23  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Implement `set-event-filter', `get-event-filter'.

	* event.scm: Test `set-event-filter' and `get-event-filter'.

2009-04-04  Thien-Thi Nguyen  <ttn@gnuvola.org>

	New (sdl gfx) proc: draw-arc

	* gfx.scm: Test arc drawing, too.

2009-04-02  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Test character (font) stuff, too.

	* gfx.scm (draw-characters!): New proc.
	Use it in blitting tests to also write characters to SCREEN.

2008-05-30  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Test set-position (mixer).

	* mixer.scm: Use `set-position'.

2008-04-02  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Move alive.test into test/.

	* alive.test: Rename from ../alive.test.

2008-03-31  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Improve leak testing.

	* fx.wav: New file.
	* leak.scm (LOTS): New var.
	(lots): Use `LOTS'.
	(check-alloc/dealloc jam!): Use `LOTS'.
	(alloc/dealloc-tests): If TTF is available, arrange to check
	`load-font'.  Likewise for MIXER and `load-music' and `load-wave'.

2008-03-31  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Use default frequency for testing mixer.

	* background.ogg: Re-encode at 44100 Hz.
	* mixer.scm: Open audio w/ default frequency.

2008-03-21  Thien-Thi Nguyen  <ttn@gnuvola.org>

	For testing, factor common procs, values.

	* common (datafile): New proc.
	(debug?): New boolan;
	if true enable debug evaluator and backtraces.
	* event.scm: Delete `datafile' and `debug?' definitions.
	* gfx.scm: Likewise.
	* image.scm: Likewise.
	* leak.scm: Likewise.
	* mixer.scm: Likewise.
	* rect.scm: Likewise.
	* roto.scm: Likewise.
	* ttf.scm: Likewise.

2008-03-21  Thien-Thi Nguyen  <ttn@gnuvola.org>

	Add image filter bindings to module (sdl gfx).

	* gfx.scm: Add section to exercise `imfi-FOO' procs.

2007-10-11  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* gfx.scm: Also exercise `blit-rgba'.

2007-10-11  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* gfx.scm: Add section to exercise `set-pixel-alpha!'.

2007-10-10  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* fading.scm: From module (sdl misc-utils), no longer
	select `fade-loop!'.  Instead, select `fader/3p'.
	(fade/wait!): Use `fader/3p'.

2007-09-16  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* ttf.scm (rand-rect): Make sure entire rect fits in the screen.
	(sentence): Make into a circular list of strings.
	(font): Delete.
	(fonts): New data structure.
	(rand-rect): Take FONT and WORD; compute
	both size and dimension of returned rectangle.
	[main]: Cycle through `sentence' and `fonts'
	and mix up background color arg to `render-text'.

2007-09-16  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* fading.scm (as-four): Use `(sdl gfx) shrink-surface'.

2007-09-16  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* roto.scm (spin): New macro.
	Use it to re-implement the `roto-zoom-surface'
	test and to add a test for `roto-zoom-surface-xy'.

2007-09-15  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* gfx.scm: Add textured-polygon drawing.

2007-09-15  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* gfx.scm (SCREEN): New var.  Throughout,
	use it instead of `(SDL:get-video-surface)'.

2007-09-14  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* fading.scm (fade/wait!): Wait a little less.

2007-05-16  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* background.ogg, fx.ogg: New files.
	* mixer.scm (background): Use background.ogg.
	(fx): Use fx.ogg.
	* noise.wav, test.wav: Delete files.

2007-05-16  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* mixer.scm: Open audio at 12048 Hz; play `fx' every 1.5 sec.

2007-03-29  Thien-Thi Nguyen  <ttn@gnuvola.org>

	* mixer.scm: Arrange to skip unless INTERACTIVE=1.

2007-01-09  Thien-Thi Nguyen  <ttn@ambire>

	* rect.scm (rand-rect): Rewrite.

2007-01-08  Thien-Thi Nguyen  <ttn@ambire>

	* rect.scm: Use `update-rect'.

2006-11-16  Thien-Thi Nguyen  <ttn@ambire>

	* fading.scm, gfx.scm, roto.scm: Update call to `fill-rect'.

2006-11-14  Thien-Thi Nguyen  <ttn@ambire>

	* common (exit-77): Use `simple-format'.

2006-07-21  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* cursor.scm: Use gnu-goatee.jpg for background.
	Loop a few times to make it more interesting.

2006-05-29  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* cursor.scm: Arrange to skip unless INTERACTIVE=1.

2006-05-28  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* event.scm, leak.scm, mixer.scm, ttf.scm: Use `assq-ref'.

2006-01-28  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* leak.scm (malloced): Do gc twice.

2006-01-28  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* fading.scm: From module (sdl misc-utils), also select `fade-loop!'.
	(fade!): Delete proc.  Update caller to use `fade-loop!'
	passing in a surface unconditionally for REPLACEMENT.

2006-01-27  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* event.scm (text-rect): Delete rect.
	(display-centered-w/height-proc): New proc.
	(display-centered): Use `display-centered-w/height-proc'.
	(display-centered/next-line): New proc.
	(input-loop): Also display `SDL:get-key-state' return value.
	Also, use `display-centered-w/height-proc' for "Press Escape" message.

2006-01-27  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* event.scm (datadir): Delete proc.
	(font): Incorporate `datadir'.

2005-05-16  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* leak.scm: New file.

2005-01-22  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* gfx.scm: Add bezier, hline, vline and pie-slice drawing.

2005-01-22  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* roto.scm: Use module (sdl gfx).
	Use `GFX:roto-zoom-surface'.

	* fading.scm: Use module (sdl gfx).
	(as-four): Use `GFX:zoom-surface'.

2005-01-06  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* roto.scm: Keep the rotozoomed image centered.

2005-01-06  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* event.scm: Display event states before starting the main input loop.
	(display-centered): Take format string and args. Update callers.

2005-01-06  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* rect.scm, mixer.scm, event.scm: Use `simple-format'.

2005-01-06  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* fading.scm: New file.

2004-05-26  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* cursor.scm: Warp the pointer to screen center,
	and wait a bit, before setting the new shape.

2004-05-21  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* gfx.scm: Set `*random-state*'; use current time for seed.
	* rect.scm: Likewise.
	* ttf.scm: Likewise.

2004-05-21  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* rect.scm: Rewrite to not use `call-with-clip-rect'.
	(rand-rect): Rewrite.
	(screen): New var. Use it for demo loop.

2004-05-20  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* gfx.scm: Add section to draw polygons.

2004-05-20  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* gfx.scm: Expand line-drawing.
	Add section to draw ellipses.
	Add section to draw circles.
	Bump before-quit delay to 2000.

2004-03-04  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* event.scm (datadir): Delete var.
	(datafile): New proc. Update `datadir' users to use it.
	* image.scm: Likewise.
	* mixer.scm: Likewise.
	* roto.scm: Likewise.
	* ttf.scm: Likewise.

2004-02-23  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* ttf.scm: Check `SDL:ttf-init' return value.

2004-02-08  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* roto.scm: Also vary the zoom parameter.

2003-11-20  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* cursor.scm: Add #:renamer clause for SDL modules.
	Throughout, update names to use "SDL:" prefix instead of "sdl-".
	* gfx.scm: Likewise.
	* mixer.scm: Likewise.
	* rect.scm: Likewise.
	* ttf.scm: Likewise.
	* event.scm: Likewise.
	* image.scm: Likewise.
	* opengl.scm: Likewise.
	* roto.scm: Likewise.

2003-11-18  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* event.scm: Merge two `use-modules' forms
	for `(sdl sdl)' and `(sdl ttf)' into one.
	* ttf.scm: Likewise.
	* gfx.scm: Likewise for `(sdl sdl)' and `(sdl gfx)'.
	* mixer.scm: Likewise for `(sdl sdl)' and `(sdl mixer)'.

2003-11-11  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* common: New file.

	* cursor.scm: Remove shell-script header.
	Check vars defined in common file, use `exit-77' as appropriate.
	* gfx.scm: Likewise.
	* mixer.scm: Likewise.
	* rect.scm: Likewise.
	* ttf.scm: Likewise
	* event.scm: Likewise.
	* image.scm: Likewise.
	* opengl.scm: Likewise.
	* roto.scm: Likewise.

2003-11-06  Thien-Thi Nguyen  <ttn@surf.glug.org>

	* cursor.scm: Rewrite header in modern-sh-wrapper style.
	* opengl.scm: Likewise.
	* image.scm: Likewise.

	* event.scm: Rewrite header in modern-sh-wrapper style.
	In shell-script header, add checks for env vars
	NONINTERACTIVE and HAVE_TTF, and exit 77 as appropriate.
	No longer use module (ice-9 format).
	Split one `use-modules' into two for `(sdl sdl)' and `(sdl ttf)'.
	(debug?): New var, init from env var DEBUG.
	If non-#f, enable debug evaluator and backtrace on error.

	* rect.scm: Rewrite header in modern-sh-wrapper style.
	(debug?): New var, init from env var DEBUG.
	If non-#f, enable debug evaluator and backtrace on error.
	Also, if `debug?', display `sdl-get-video-info' alist.

	* roto.scm: Rewrite header in modern-sh-wrapper style.
	Replace 15 degrees and one turn,
	with 27 degrees and 3 turns, respectively.

	* ttf.scm: Rewrite header in modern-sh-wrapper style.
	In shell-script header, add checks for env var
	HAVE_TTF, and exit 77 as appropriate.
	No longer use module (ice-9 format).
	Split one `use-modules' into two for `(sdl sdl)' and `(sdl ttf)'.
	(debug?): New var, init from env var DEBUG.
	If non-#f, enable debug evaluator and backtrace on error.

	* gfx.scm: Rewrite header in modern-sh-wrapper style.
	Split one `use-modules' into two for `(sdl sdl)' and `(sdl gfx)'.
	(debug?): New var, init from env var DEBUG.
	If non-#f, enable debug evaluator and backtrace on error.

	* mixer.scm: Rewrite header in modern-sh-wrapper style.
	In shell-script header, add check for env var
	HAVE_MIXER, and exit 77 as appropriate.
	No longer use module (ice-9 format).
	Split one `use-modules' into two for `(sdl sdl)' and `(sdl mixer)'.
	In the case where `sdl-query-spec' returns #f,
	display informative message before doing exit 77.


Copyright (C) 2010, 2011, 2012, 2013 Thien-Thi Nguyen

Copying and distribution of this file, with or without modification,
are permitted provided the copyright notice and this notice are preserved.
