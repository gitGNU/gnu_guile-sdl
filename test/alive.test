;;; alive.test --- breathe in breathe out               -*- scheme -*-

;; Copyright (C) 2003, 2004, 2005 Thien-Thi Nguyen
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3 of
;; the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public
;; License along with this program; if not, write to the Free
;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA  02110-1301  USA

(define debug? (getenv "DEBUG"))
(define (d>> s . args)
  (and debug? (apply format (current-error-port) (string-append s "\n") args)))

(d>> "loading (sdl sdl)")
(use-modules ((sdl sdl) #:renamer (symbol-prefix-proc 'SDL:)))

(d>> "is SDL:flags->number (C function exposed to Scheme) defined?")
SDL:flags->number

(d>> "all the flag stashes")
(let ((all (list
            (SDL:flagstash:init)
            (SDL:flagstash:overlay)
            (SDL:flagstash:video)
            (SDL:flagstash:palette)
            (SDL:flagstash:event-mod))))
  (d>> "all: ~S" all)
  (or (= 5 (length all))
      (error "unexpected number of flag stashes"))
  (for-each (lambda (stash)
              (d>> "~A: ~S" stash (SDL:flagstash-flags stash)))
            all))

(d>> "find the keyboard mod flags")
(define *kmod* (SDL:flagstash:event-mod))
(or *kmod* (error "could not find SDL:mod-flags"))

(d>> "try SDL:flags->number")
(let ((n (SDL:flags->number *kmod* '(KMOD_LMETA KMOD_LSHIFT))))
  (d>> "~A\n" n)
  (or (number? n) (error "SDL:flags->number did not yield a number!"))
  (or (string=? "2001" (number->string n 8))
      (error "SDL:flags->number gave a number but it was wrong!")))

(d>> "try SDL:number->flags")
(let ((ls (SDL:number->flags *kmod* #o2001)))
  (d>> "~S\n" ls)
  (or (pair? ls) (error "SDL:number->flags did not yield a list!"))
  (or (and-map symbol? ls)
      (error "SDL:number->flags gave a list with a non-symbol element!"))
  (or (equal? ls '(KMOD_LMETA KMOD_LSHIFT))
      (equal? ls '(KMOD_LSHIFT KMOD_LMETA))
      (error "SDL:number->flags gave a list with wrong elements!")))

(let ((count 5))
  (d>> "doing ~A gc" count)
  (let loop ((count count))
    (or (> 0 count)
        (begin
          (d>> "#~A (gc) => ~A\n" count (gc))
          (loop (1- count))))))

(cond (*have-ttf*
       (d>> "loading (sdl ttf)")
       (use-modules (sdl ttf))))

(cond (*have-mixer*
       (d>> "loading (sdl mixer)")
       (use-modules (sdl mixer))))

(use-modules (sdl simple))

(exit #t)

;;; alive.test ends here
