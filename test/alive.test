;;; alive.test --- breathe in breathe out               -*- scheme -*-

;; Copyright (C) 2003, 2004, 2005, 2011, 2013 Thien-Thi Nguyen
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3 of
;; the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public
;; License along with this program; if not, write to the Free
;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA  02110-1301  USA

(info "loading (sdl sdl)")
(use-modules ((sdl sdl) #:prefix SDL:))

(info "is SDL:flags->number (C function exposed to Scheme) defined?")
SDL:flags->number

(info "try SDL:flags->number")
(let ((n (SDL:flags->number 'keyboard-modifier '(L-meta L-shift))))
  (info "~A" n)
  (or (number? n) (error "SDL:flags->number did not yield a number!"))
  (or (string=? "2001" (number->string n 8))
      (error "SDL:flags->number gave a number but it was wrong!")))

(info "try SDL:number->flags")
(let ((ls (SDL:number->flags 'keyboard-modifier #o2001)))
  (info "~S" ls)
  (or (pair? ls) (error "SDL:number->flags did not yield a list!"))
  (or (and-map symbol? ls)
      (error "SDL:number->flags gave a list with a non-symbol element!"))
  (or (equal? ls '(L-meta L-shift))
      (equal? ls '(L-shift L-meta))
      (error "SDL:number->flags gave a list with wrong elements!")))

(let ((count 5))
  (info "doing ~A gc" count)
  (let loop ((count count))
    (or (> 0 count)
        (begin
          (info "#~A (gc) => ~A" count (gc))
          (loop (1- count))))))

(cond (*have-ttf*
       (info "loading (sdl ttf)")
       (use-modules ((sdl ttf) #:prefix TTF:))
       (info "styles: ~S" (map car (SDL:kotk 'font-style)))))

(cond (*have-mixer*
       (info "loading (sdl mixer)")
       (use-modules ((sdl mixer) #:prefix MIXER:))))

(info "loading (sdl simple)")
(use-modules (sdl simple))

(let ((oops (SDL:was-init '())))
  (and (pair? oops)
       (error "all loaded and some initialized:" oops))
  (info "all loaded and none initialized"))

(let ((all (SDL:kotk)))
  (info "~A stashes" (length all))
  (for-each (lambda (stash)
              (apply info "~A: ~A ~A" stash)
              (for-each (lambda (ent)
                          (info "\t~S" ent))
                        (SDL:kotk (car stash))))
            all))

(info "enums round-trip")
(let* ((num (SDL:enum->number 'alpha-limit 'opaque))
       (sym (SDL:number->enum 'alpha-limit num)))
  (or (eq? 'opaque sym)
      (error "enums round-trip failed:" (list 'num: num 'sym: sym))))

(info "flags round-trip")
(let* ((num (SDL:flags->number 'joystick-hat-position '(up right)))
       (sym (SDL:number->flags 'joystick-hat-position num)))
  (or (equal? '(up right) sym)
      (error "flags round-trip failed:" (list 'num: num 'sym: sym))))

(let ((s (SDL:get-error)))
  (if (string-null? s)
      (info "no errors after all")
      (error "spurious error:" s)))

(exit #t)

;;; alive.test ends here
