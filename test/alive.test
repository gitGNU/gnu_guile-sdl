;;; alive.test --- breathe in breathe out               -*- scheme -*-

;; Copyright (C) 2003, 2004, 2005, 2011, 2013 Thien-Thi Nguyen
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3 of
;; the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public
;; License along with this program; if not, write to the Free
;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA  02110-1301  USA

(info "loading (sdl sdl)")
(use-modules ((sdl sdl) #:prefix SDL:))

(info "all the enum stashes")
(let ((all (list
            SDL:event-types
            SDL:event-keys
            SDL:event-states
            SDL:alpha-enums)))
  (info "all: ~S" all)
  (for-each (lambda (stash)
              (let* ((symbols (SDL:enumstash-enums stash))
                     (numbers (map (lambda (symbol)
                                     (SDL:enum->number stash symbol))
                                   symbols)))
                (info "~A: ~S" stash (map cons symbols numbers))
                (or (equal? symbols (map (lambda (n)
                                           (SDL:number->enum stash n))
                                         numbers))
                    (error "enum round-trip failed"))))
            all))

(info "is SDL:flags->number (C function exposed to Scheme) defined?")
SDL:flags->number

(info "all the flag stashes")
(let ((all (list
            (SDL:flagstash:init)
            (SDL:flagstash:overlay)
            (SDL:flagstash:video)
            (SDL:flagstash:palette)
            (SDL:flagstash:event-mask)
            (SDL:flagstash:event-mod))))
  (info "all: ~S" all)
  (or (= 6 (length all))
      (error "unexpected number of flag stashes"))
  (for-each (lambda (stash)
              (info "~A: ~S" stash (SDL:flagstash-flags stash)))
            all))

(info "find the keyboard mod flags")
(define *kmod* (SDL:flagstash:event-mod))
(or *kmod* (error "could not find SDL:mod-flags"))

(info "try SDL:flags->number")
(let ((n (SDL:flags->number *kmod* '(KMOD_LMETA KMOD_LSHIFT))))
  (info "~A" n)
  (or (number? n) (error "SDL:flags->number did not yield a number!"))
  (or (string=? "2001" (number->string n 8))
      (error "SDL:flags->number gave a number but it was wrong!")))

(info "try SDL:number->flags")
(let ((ls (SDL:number->flags *kmod* #o2001)))
  (info "~S" ls)
  (or (pair? ls) (error "SDL:number->flags did not yield a list!"))
  (or (and-map symbol? ls)
      (error "SDL:number->flags gave a list with a non-symbol element!"))
  (or (equal? ls '(KMOD_LMETA KMOD_LSHIFT))
      (equal? ls '(KMOD_LSHIFT KMOD_LMETA))
      (error "SDL:number->flags gave a list with wrong elements!")))

(let ((count 5))
  (info "doing ~A gc" count)
  (let loop ((count count))
    (or (> 0 count)
        (begin
          (info "#~A (gc) => ~A" count (gc))
          (loop (1- count))))))

(cond (*have-ttf*
       (info "loading (sdl ttf)")
       (use-modules ((sdl ttf) #:prefix TTF:))
       (let ((styles (TTF:flagstash:ttf)))
         (info "styles: ~S ~S" styles (SDL:flagstash-flags styles)))))

(cond (*have-mixer*
       (info "loading (sdl mixer)")
       (use-modules ((sdl mixer) #:prefix MIXER:))))

(info "loading (sdl simple)")
(use-modules (sdl simple))

(let ((oops (SDL:was-init '())))
  (and (pair? oops)
       (error "all loaded and some initialized:" oops))
  (info "all loaded and none initialized"))

(let ((s (SDL:get-error)))
  (if (string-null? s)
      (info "no errors after all")
      (error "spurious error:" s)))

(exit #t)

;;; alive.test ends here
