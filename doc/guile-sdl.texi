\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-sdl.info
@settitle guile-sdl
@iftex
@afourpaper
@end iftex
@c %**end of header

@include version.texi

@dircategory Guile
@direntry
* guile-sdl: (guile-sdl).     SDL for Guile
@end direntry


@c --- title page starts here ---

@titlepage
@title guile-sdl
@subtitle SDL for Guile
@subtitle Version @value{VERSION}
@author Alex Shinn

@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2003,2004 Thien-Thi Nguyen

Copyright @copyright{} 2001 Alex Shinn

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
@end titlepage

@c --- title page ends here ---

@syncodeindex vr cp
@syncodeindex fn cp

@node Top
@top The (sdl *) Modules

@ifinfo
This file documents the guile-sdl package, which provides the modules
@code{(sdl sdl)}, @code{(sdl gfx)}, @code{(sdl ttf)} and @code{(sdl mixer)}
for use in Guile Scheme programs.  These modules wrap the Simple Direct Media
Layer@footnote{The SDL homepage is @uref{http://www.libsdl.org}.} libraries on
your system.
@end ifinfo

@menu
* Introduction::                What is this all about?
* General SDL::                 General SDL functions
* Video::                       Video and Graphics Functions
* Events::                      Events and Input Handling
* Joystick::                    Joystick Handling
* CDROM::                       CDROM Handling
* OpenGL::                      OpenGL Interface
* TrueType::                    TrueType Font Support
* Audio::                       Audio Support
* Index::                       Procedure index.
@end menu

@node Introduction
@chapter Introduction

The (sdl *) modules are an interface to the SDL (Simple Direct Media
Layer) library.  The goal is to provide both a clean and direct
interface to the lowest level SDL, while extending with higher level
concepts where useful, such as default arguments and functional-style
application of graphics routines.  Several SDL add-on libraries have
been wrapped and included with guile-sdl, including SDL_image (for
loading multiple image formats), SDL_ttf (for rendering true type
fonts), SDL_mixer (for playing/mixing different audio formats), and
SDL_rotozoom (for rotating and scaling images).  In addition, some
low-level 2D graphics primitives have been provided.

@menu
* Quick Start::                A simple example
* Naming Conventions::         Naming conventions
* Limitations::                Problems we don't hide
* TODO::                       Plans for the future
@end menu

@node Quick Start
@section Quick Start

To whet your appetite, and hopefully get you excited about the ease
and flexibility of programming with guile-sdl, we begin with a simple
example.  The following program, which can be found in the examples
directory, is a simple image browser.  You can cycle through images by
using space, n or right to go forward, backspace, p or left to go
backwards, and escape or q to quit.

@lisp
;; load the SDL module and some useful srfi's
(use-modules ((sdl sdl) #:renamer (symbol-prefix-proc 'SDL:))
             (srfi srfi-1)
             (srfi srfi-2))

;; initialize the video subsystem
(SDL:init '(SDL_INIT_VIDEO))

;; directory to search for images in
(define image-dir "/usr/share/pixmaps/")

;; utility to test if a path is a directory
(define (file? f)
  (let* ((stats (stat f))
         (type (stat:type stats)))
    (eq? type 'regular)))

;; build a ring of image file names
(define image-ring
  (let ((dir (opendir image-dir)))
    (letrec ((D (lambda (ls)
                  (let ((file (readdir dir)))
                    (if (eof-object? file)
                        (begin (closedir dir) ls)
                        (D (cons (string-append image-dir file)
                                 ls)))))))
      (apply circular-list (reverse (filter file? (D '())))))))

;; functions to cycle through the ring
(define (next-image)
  (let ((next (car image-ring)))
    (set! image-ring (cdr image-ring))
    next))

(define (prev-image)
  (let ((orig image-ring))
    (while (not (eq? (cddr image-ring) orig))
      (set! image-ring (cdr image-ring)))
    (let ((image (car image-ring)))
      (set! image-ring (cdr image-ring))
      image)))

;; display an image given a filename
(define (show file)
  (and-let* ((image (SDL:load-image file)))
    (SDL:set-video-mode (SDL:surface:w image) (SDL:surface:h image) 24)
    (SDL:blit-surface image)
    (SDL:flip)))

;; show the first image
(show (next-image))

;; event handler
(let handle ((e (SDL:make-event)))
  (if (SDL:wait-event e)
    (case (SDL:event:type e)
      ((SDL_KEYDOWN)
       (case (SDL:event:key:keysym:sym e)
         ((SDLK_LEFT SDLK_BACKSPACE)
          (show (prev-image)))
         ((SDLK_RIGHT SDLK_SPACE)
          (show (next-image)))
         ((SDLK_ESCAPE SDLK_q)
          (SDL:quit)
          (quit))))))
  (handle e))
@end lisp

@node Naming Conventions
@section Naming Conventions

The most important thing to learning a wrapped library for a
programming language, assuming you know the language and the library,
is to know the naming conventions.  Then you can begin programming
without having to look up the exact function reference (available
in the rest of this document).

@menu
* Renaming C Functions::        How SDL C Functions are named in Guile
* Enums and Constants::         Naming enumerated types
* Create and Make::             Create vs Make Functions
@end menu


@node Renaming C Functions
@subsection Renaming C Functions

As with standard guile naming conventions, all names are converted to
lower-case, and underscores are replaced with hyphens.  Functions that
modify one or more arguments have an exclamation point (@code{!})
appended, and functions which ask a question and return a boolean
value have a question mark (@code{?}) appended.

@node Enums and Constants
@subsection Enums and Constants

SDL enumerated types and constants are passed and returned as symbols,
thus enforcing their "constant" nature and for ease of use in
@code{case} statements.  Flags, such as the SDL initialization flags
and video surface flags, are treated as lists of symbols, each
constant in the flag group that you would @code{or} together in C code
becoming a symbol in the list.  All such constant symbols retain their
exact C names.  A particular set of flags is called a @dfn{flagstash}.
You can use @code{flagstash-flags} to examine the flags encapsulated
by a flagstash object.

You may also pass numbers, and can convert between the symbol and
numeric value with @code{enum->number}, @code{number->enum},
@code{flags->number} and @code{number->flags}.

@include ef-ref.texi

@node Create and Make
@subsection Create and Make

The standard SDL prefix for creating a new instance of a type is
@code{create}.  The standard Guile prefix is @code{make}.  Wherever an
SDL function uses the @code{create} prefix we will keep it.  SMOB
creation functions unique to Guile, such as @code{make-rect}, will
use @code{make} as a prefix.  In addition, we will sometimes introduce
higher-level creation functions, such as @code{make-surface},
which is a wrapper to @code{create-rgb-surface} which provides
useful default values from the current screen information.


@node Limitations
@section Limitations

There are some known problems with guile-sdl modules.  This section attempts
to make them well-known, if not well-liked...

@itemize

@item API in flux

Since guile-sdl is in alpha stage, its interfaces are not stable.
Specifically, module names, the contents of modules, procedure names,
procedure behavior: all these can change at any time up until the 1.0 release.
C'est la vie.

@item no logo

How can any self-respecting package of bindings for libsdl not have a flashy,
animated logo?  Bonus points for suitable accompanying sound blurb.

@item threading picture unclear

Where do threads fit in if at all?  Why doesn't the guile-sdl maintainer
learn all about threads, fix guile-1.4.x to support that and then arrange for
guile-sdl to DTRT?  Questions questions...

@item [your gripes here]

@end itemize


@node TODO
@section TODO

Here is an excerpt of the TODO file:

@verbatiminclude TODO-excerpt

Basically, a 1.0 release is still quite far away.  But we'll get there
at some point.  Another interesting thing to consider is, what happens
if there is another release of SDL after 1.2?  What if it is (gasp)
incompatible with SDL 1.2?


@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------

@include ref.texi

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------

@node Index
@unnumbered Index

@printindex cp

@contents

@bye
