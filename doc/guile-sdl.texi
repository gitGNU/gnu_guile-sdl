\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-sdl.info
@documentencoding UTF-8
@settitle Guile-SDL
@paragraphindent 0
@iftex
@afourpaper
@end iftex
@c %**end of header

@include version.texi

@dircategory Guile modules
@direntry
* Guile-SDL: (guile-sdl).     SDL for Guile.
@end direntry

@copying
Copyright @copyright{} 2003--2013 Thien-Thi Nguyen

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the appendix entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@c --- title page starts here ---

@titlepage
@title Guile-SDL
@subtitle SDL for Guile
@subtitle Version @value{VERSION}
@author Thien-Thi Nguyen
@author Alex Shinn

@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c --- title page ends here ---

@contents

@syncodeindex vr cp
@syncodeindex fn cp

@ifnottex
@node Top
@top The (sdl *) Modules

This manual documents Guile-SDL @value{VERSION},
a package which provides the modules
@code{(sdl sdl)}, @code{(sdl gfx)}, @code{(sdl ttf)} and @code{(sdl mixer)}
for use in Guile Scheme programs.  These modules wrap the Simple Direct Media
Layer@footnote{The SDL homepage is @uref{http://www.libsdl.org}.} libraries on
your system.  Additionally, experimental abstractions and convenience
procedures are provided in the modules @code{(sdl misc-utils)} and
@code{(sdl simple)}.

This manual is
@insertcopying
@end ifnottex

@menu
* Introduction::                What is this all about?
* General SDL::                 General SDL functions

* Video::                       Video and Graphics Functions
* Events::                      Events and Input Handling
* Joystick::                    Joystick Handling
* CDROM::                       CDROM Handling
* OpenGL::                      OpenGL Interface
* TrueType::                    TrueType Font Support
* Audio::                       Audio Support

* SDL_gfx::                     By Andreas Schiffler

* Miscellaneous Utilities::     Everything Else
* Simple Closures::             Experimental Abstractions

* Excuses::                     Undone Wrapping

* Stashes::                     Sets of numerically-backed symbols.
* GNU FDL::                     Copying and sharing this documentation.
* Index::
@end menu

@node Introduction
@chapter Introduction

The (sdl *) modules are an interface to the SDL (Simple Direct Media
Layer) library.  The goal is to provide both a clean and direct
interface to the lowest level SDL, while extending with higher level
concepts where useful, such as default arguments and functional-style
application of graphics routines.  Several SDL add-on libraries have
been wrapped and included with Guile-SDL, including SDL_image (for
loading multiple image formats), SDL_ttf (for rendering true type
fonts), SDL_mixer (for playing/mixing different audio formats), and
SDL_rotozoom (for rotating and scaling images).  In addition, some
low-level 2D graphics primitives have been provided.

@menu
* Quick Start::                A simple example
* Naming Conventions::         Naming conventions
* Uniform Vectors::            Regular for elegance
* Limitations::                Problems we don't hide
@end menu

@node Quick Start
@section Quick Start

To whet your appetite, and hopefully get you excited about the ease
and flexibility of programming with Guile-SDL, we begin with a simple
example.  The following program is a simple image browser.
You can cycle through images by
using space, n or right to go forward, backspace, p or left to go
backwards, and escape or q to quit.

@lisp
;; load the SDL module and some useful srfi's
(use-modules ((sdl sdl) #:prefix SDL:)
             (srfi srfi-1)
             (srfi srfi-2))

;; initialize the video subsystem
(SDL:init 'video)

;; directory to search for images in
(define image-dir "/usr/share/pixmaps/")

;; utility to test if a path is a directory
(define (file? f)
  (let* ((stats (stat f))
         (type (stat:type stats)))
    (eq? type 'regular)))

;; build a ring of image file names
(define image-ring
  (let ((dir (opendir image-dir)))
    (letrec ((D (lambda (ls)
                  (let ((file (readdir dir)))
                    (if (eof-object? file)
                        (begin (closedir dir) ls)
                        (D (cons (string-append image-dir file)
                                 ls)))))))
      (apply circular-list (reverse (filter file? (D '())))))))

;; functions to cycle through the ring
(define (next-image)
  (let ((next (car image-ring)))
    (set! image-ring (cdr image-ring))
    next))

(define (prev-image)
  (let ((orig image-ring))
    (while (not (eq? (cddr image-ring) orig))
      (set! image-ring (cdr image-ring)))
    (let ((image (car image-ring)))
      (set! image-ring (cdr image-ring))
      image)))

;; display an image given a filename
(define (show file)
  (and-let* ((image (SDL:load-image file)))
    (SDL:set-video-mode (SDL:surface:w image) (SDL:surface:h image) 24)
    (SDL:blit-surface image)
    (SDL:flip)))

;; show the first image
(show (next-image))

;; event handler
(let handle ((e (SDL:make-event)))
  (if (SDL:wait-event e)
    (case (SDL:event:type e)
      ((SDL_KEYDOWN)
       (case (SDL:event:key:keysym:sym e)
         ((left backspace)
          (show (prev-image)))
         ((right space)
          (show (next-image)))
         ((escape q)
          (SDL:quit)
          (quit))))))
  (handle e))
@end lisp

@node Naming Conventions
@section Naming Conventions

The most important thing to learning a wrapped library for a
programming language, assuming you know the language and the library,
is to know the naming conventions.  Then you can begin programming
without having to look up the exact function reference (available
in the rest of this document).

@menu
* Renaming C Functions::        How SDL C Functions are named in Guile
* Enums and Constants::         Naming enumerated types
* Create and Make::             Create vs Make Functions
@end menu


@node Renaming C Functions
@subsection Renaming C Functions

As with standard guile naming conventions, all names are converted to
lower-case, and underscores are replaced with hyphens.  Functions that
modify one or more arguments have an exclamation point (@code{!})
appended, and functions which ask a question and return a boolean
value have a question mark (@code{?}) appended.

@node Enums and Constants
@subsection Enums and Constants

SDL enumerated types and constants are passed and returned as symbols,
thus enforcing their "constant" nature and for ease of use in
@code{case} statements.  Flags, such as the SDL initialization flags
and video surface flags, are treated as lists of symbols, each
constant in the flag group that you would @code{or} together in C code
becoming a symbol in the list.

Some of these symbols retain their exact C names, while others
are adapted to better fit Scheme (mostly by removing the @samp{SDL_}
prefix, changing underscores to hyphens, downcasing, and inserting a
hyphen between ``words'').

A particular set of enums is called an @dfn{enumstash}.  Likewise
@dfn{flagstash} for flags.

You can use @code{kotk} to examine the enums and flags encapsulated by
these respectively typed objects.
You can
also use integers where enums/flags are expected, and can convert between the
symbol and numeric value with @code{enum->number}, @code{number->enum},
@code{flags->number} and @code{number->flags}.

The conversion procs all take @var{stash} as the first argument,
a symbol that identifies the particular set of enums/flags.
For backward compatability, @var{stash} may also be such an object,
but this support @strong{will be removed} after 2013-12-31, when
those objects are to be fully internalized.

@include ef-ref.texi

@cindex @code{non-member-symbol}, error key
@cindex error key @code{non-member-symbol}
Conversion from symbols to numbers (including @code{enum->number} and
@code{flags->number}) throws an error with key @code{non-member-symbol}
if the specified symbol is not a member of the respective enumstash or
flagstash.

@node Create and Make
@subsection Create and Make

The standard SDL prefix for creating a new instance of a type is
@code{create}.  The standard Guile prefix is @code{make}.  Wherever an
SDL function uses the @code{create} prefix we will keep it.  Object
creation functions unique to Guile, such as @code{make-rect}, will
use @code{make} as a prefix.  In addition, we will sometimes introduce
higher-level creation functions, such as @code{make-surface},
which is a wrapper to @code{create-rgb-surface} which provides
useful default values from the current screen information.


@node Uniform Vectors
@section Uniform Vectors

@cindex uniform vector argument(s)
@cindex @code{u8}
@cindex @code{u16}
@cindex @code{s16}
Some procedures take one or more @dfn{uniform vector} arguments,
as specified in @acronym{SRFI} 4 (@pxref{Video}, @pxref{SDL_gfx}).
The specific type of vector is one of @code{u8}, @code{u16},
@code{s16}, where @code{u} or @code{s} stands for ``unsigned'' or
``signed'', respectively, and the rest the number of bits.


@node Limitations
@section Limitations

There are some known problems with Guile-SDL modules.  This section attempts
to make them well-known, if not well-liked...

@itemize

@item API in flux

Since Guile-SDL is in alpha stage, its interfaces are not stable.
Specifically, module names, the contents of modules, procedure names,
procedure behavior: all these can change at any time up until the 1.0 release.
C'est la vie.

@item no logo

How can any self-respecting package of bindings for libsdl not have a flashy,
animated logo?  Bonus points for suitable accompanying sound blurb.

@item threading picture unclear

Where do threads fit in if at all?  Why doesn't the Guile-SDL maintainer
learn all about threads, fix guile-1.4.x to support that and then arrange for
Guile-SDL to DTRT?  Questions questions...

@item [your gripes here]

@end itemize


@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------

@include ref.texi

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------

@include excuse.texi

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------
@node Stashes
@appendix Stashes

@include k-ref.texi

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------
@node GNU FDL
@appendix GNU Free Documentation License

@include fdl.texi

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------

@node Index
@unnumbered Index

@printindex cp

@bye
