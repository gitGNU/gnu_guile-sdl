;;; notes.tdt

;; Copyright (C) 2005, 2008, 2009 Thien-Thi Nguyen
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3 of
;; the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public
;; License along with this program; if not, write to the Free
;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA  02110-1301  USA

(text-db-table-config
  (delim . "\f")
  (meta
   (todo
    "To be completed by Guile-SDL 1.0 (that is, if All Goes Well).")
   (internal
    "These interface elements are exposed in the C header"
    "but should not be exposed to Scheme, for reasons of"
    "either safety or inutility.")
   (probably-never
    "Don't expect to see these exposed to Scheme, ever!")
   (doze
    "Windoze support, blech.")
   (macos
    "Macintosh support, meh.")
   (threading-implications
    "Will (any :--) ttn ever be ready for parallelism?")
   (rwops
    "Read-write operations.")
   (endian
    "These concern little- vs. big-endian i/o."
    "Perhaps Guile already provides decent alternatives.")
   (use-mixer-instead
    "These elements are obsoleted by the module @code{(sdl mixer)}.")
   (hook
    "Callback from SDL to Scheme code.  Can be tricky to get right..."))
  (fields (#:name sexp) (#:attributes sexp) (#:notes rest-lines-trim)))

 SDL_SoftStretch (internal probably-never)

SDL_video.h sez:
/* Not in public API at the moment - do not use! */

 SDL_LowerBlit (internal)

 SDL_UpperBlit (internal)

 SDL_SaveBMP_RW (doze probably-never)

 SDL_LoadBMP_RW (doze probably-never)

 SDL_CreateRGBSurfaceFrom ()

not sure what this is useful for

 SDL_GL_UpdateRects ()

arglist: (int numrects, SDL_Rect* rects)

we can either try to map uniform vectors (of smobs),
or introduce a `RectVector' smob.

 SDL_VideoInit (internal probably-never)

actually, SDL_video.h sez:
/* These functions are used internally, and should not be used unless you
 * have a specific need to specify the video driver you want to use.
 * You should normally use SDL_Init() or SDL_InitSubSystem().
 * ...
 */

 SDL_VideoQuit (internal probably-never)

see note for `SDL_VideoInit'

 SDL_Linked_Version ()

SDL_version.h sez:
/* This function gets the version of the dynamically linked SDL library.
   it should NOT be used to fill a version structure, instead you should
   use the SDL_Version() macro.
 */

 SDL_RemoveTimer (threading-implications)

 SDL_AddTimer (threading-implications)

 SDL_SetTimer (threading-implications)

 SDL_KillThread (todo threading-implications)

 SDL_WaitThread (todo threading-implications)

 SDL_GetThreadID (todo threading-implications)

 SDL_ThreadID (todo threading-implications)

 SDL_CreateThread (todo threading-implications)

 SDL_GetWMInfo ()

return value for proc `get-wm-info' does not presently
include the `lock_func' and `unlock_func' hooks.
support for those will be added after i figure out
how to "thunkify" them.

 SDL_FreeRW (rwops)

 SDL_AllocRW (rwops)

 SDL_RWFromMem (rwops)

 SDL_RWFromConstMem (rwops)

 SDL_RWFromFile (rwops)

 SDL_CondWaitTimeout (todo threading-implications)

 SDL_CondWait (todo threading-implications)

 SDL_CondBroadcast (todo threading-implications)

 SDL_CondSignal (todo threading-implications)

 SDL_DestroyCond (todo threading-implications)

 SDL_CreateCond (todo threading-implications)

 SDL_SemValue (todo threading-implications)

 SDL_SemPost (todo threading-implications)

 SDL_SemWaitTimeout (todo threading-implications)

 SDL_SemTryWait (todo threading-implications)

 SDL_SemWait (todo threading-implications)

 SDL_DestroySemaphore (todo threading-implications)

 SDL_CreateSemaphore (todo threading-implications)

 SDL_DestroyMutex (todo threading-implications)

 SDL_mutexV (todo threading-implications)

 SDL_mutexP (todo threading-implications)

 SDL_CreateMutex (todo threading-implications)

 SDL_InitQuickDraw (macos probably-never)

 SDL_RegisterApp (doze probably-never)

 SDL_SetModuleHandle (doze probably-never)

 SDL_GetKeyName ()

why do we want to know the name of a key?

 SDL_getenv (probably-never)

 SDL_putenv (probably-never)

 SDL_ClearError (probably-never)

 SDL_SetError (probably-never)

 SDL_WriteBE64 (endian probably-never)

 SDL_WriteLE64 (endian probably-never)

 SDL_WriteBE32 (endian probably-never)

 SDL_WriteLE32 (endian probably-never)

 SDL_WriteBE16 (endian probably-never)

 SDL_WriteLE16 (endian probably-never)

 SDL_ReadBE64 (endian probably-never)

 SDL_ReadLE64 (endian probably-never)

 SDL_ReadBE32 (endian probably-never)

 SDL_ReadLE32 (endian probably-never)

 SDL_ReadBE16 (endian probably-never)

 SDL_ReadLE16 (endian probably-never)

 SDL_CloseAudio (use-mixer-instead probably-never)

 SDL_UnlockAudio (use-mixer-instead probably-never)

 SDL_LockAudio (use-mixer-instead probably-never)

 SDL_MixAudio (use-mixer-instead probably-never)

 SDL_ConvertAudio (use-mixer-instead probably-never)

 SDL_BuildAudioCVT (use-mixer-instead probably-never)

 SDL_FreeWAV (use-mixer-instead probably-never)

 SDL_LoadWAV_RW (use-mixer-instead probably-never)

 SDL_PauseAudio (use-mixer-instead probably-never)

 SDL_GetAudioStatus (use-mixer-instead probably-never)

 SDL_OpenAudio (use-mixer-instead probably-never)

 SDL_AudioDriverName (use-mixer-instead probably-never)

 SDL_AudioQuit (internal use-mixer-instead probably-never)

SDL_audio.h sez:
/* These functions are used internally, and should not be used unless you
 * have a specific need to specify the audio driver you want to use.
 * You should normally use SDL_Init() or SDL_InitSubSystem().
 */

 SDL_AudioInit (internal use-mixer-instead probably-never)

see note for `SDL_AudioQuit'

 SDLNet_Init (todo)

 SDLNet_Quit (todo)

 SDLNet_ResolveHost (todo)

 SDLNet_ResolveIP (todo)

 SDLNet_TCP_Open (todo)

 SDLNet_TCP_Accept (todo)

 SDLNet_TCP_GetPeerAddress (todo)

 SDLNet_TCP_Send (todo)

 SDLNet_TCP_Recv (todo)

 SDLNet_TCP_Close (todo)

 SDLNet_AllocPacket (todo)

 SDLNet_ResizePacket (todo)

 SDLNet_FreePacket (todo)

 SDLNet_AllocPacketV (todo)

 SDLNet_FreePacketV (todo)

 SDLNet_UDP_Open (todo)

 SDLNet_UDP_Bind (todo)

 SDLNet_UDP_Unbind (todo)

 SDLNet_UDP_GetPeerAddress (todo)

 SDLNet_UDP_SendV (todo)

 SDLNet_UDP_Send (todo)

 SDLNet_UDP_RecvV (todo)

 SDLNet_UDP_Recv (todo)

 SDLNet_UDP_Close (todo)

 SDLNet_AllocSocketSet (todo)

 SDLNet_AddSocket (todo)

there are also:
#define SDLNet_TCP_AddSocket
#define SDLNet_UDP_AddSocket

 SDLNet_DelSocket (todo)

there are also:
#define SDLNet_TCP_DelSocket
#define SDLNet_UDP_DelSocket

 SDLNet_CheckSockets (todo)

 SDLNet_SocketReady (todo)

 SDLNet_FreeSocketSet (todo)

 SDLNet_Write16 (todo)

 SDLNet_Write32 (todo)

 SDLNet_Read16 (todo)

 SDLNet_Read32 (todo)

 Mix_SetPostMix (todo hook)

 Mix_HookMusic (todo hook)

 Mix_GetMusicHookData (probably-never)

If (when) `Mix_HookMusic' is added, it will not support "user data".
It's better to use object properties for that.

 Mix_HookMusicFinished (todo hook)

 Mix_ChannelFinished (todo hook)

 Mix_RegisterEffect (todo hook)

 Mix_UnregisterEffect (todo hook)

 Mix_UnregisterAllEffects (todo hook)

 Mix_SetReverb (todo)

 Mix_SetReverseStereo (todo)

 Mix_SetMusicPosition (todo)

 Mix_SetSynchroValue (todo)

 Mix_GetSynchroValue (todo)

 Mix_GetChunk (internal probably-never)


